// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.0
// source: user.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	User_Register_FullMethodName                  = "/user.User/Register"
	User_Login_FullMethodName                     = "/user.User/Login"
	User_UserSettings_FullMethodName              = "/user.User/UserSettings"
	User_SetUserSettingsTheme_FullMethodName      = "/user.User/SetUserSettingsTheme"
	User_Users_FullMethodName                     = "/user.User/Users"
	User_UserPermissionDefinitions_FullMethodName = "/user.User/UserPermissionDefinitions"
	User_UserPermissions_FullMethodName           = "/user.User/UserPermissions"
	User_GrantUserPermission_FullMethodName       = "/user.User/GrantUserPermission"
	User_RevokeUserPermission_FullMethodName      = "/user.User/RevokeUserPermission"
)

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error)
	UserSettings(ctx context.Context, in *UserSettingsRequest, opts ...grpc.CallOption) (*UserSettingsReply, error)
	SetUserSettingsTheme(ctx context.Context, in *SetUserSettingsThemeRequest, opts ...grpc.CallOption) (*SetUserSettingsThemeReply, error)
	Users(ctx context.Context, in *UsersRequest, opts ...grpc.CallOption) (*UsersReply, error)
	UserPermissionDefinitions(ctx context.Context, in *UserPermissionDefinitionsRequest, opts ...grpc.CallOption) (*UserPermissionDefinitionsReply, error)
	UserPermissions(ctx context.Context, in *UserPermissionsRequest, opts ...grpc.CallOption) (*UserPermissionsReply, error)
	GrantUserPermission(ctx context.Context, in *GrantUserPermissionRequest, opts ...grpc.CallOption) (*GrantUserPermissionReply, error)
	RevokeUserPermission(ctx context.Context, in *RevokeUserPermissionRequest, opts ...grpc.CallOption) (*RevokeUserPermissionReply, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, User_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, User_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserSettings(ctx context.Context, in *UserSettingsRequest, opts ...grpc.CallOption) (*UserSettingsReply, error) {
	out := new(UserSettingsReply)
	err := c.cc.Invoke(ctx, User_UserSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SetUserSettingsTheme(ctx context.Context, in *SetUserSettingsThemeRequest, opts ...grpc.CallOption) (*SetUserSettingsThemeReply, error) {
	out := new(SetUserSettingsThemeReply)
	err := c.cc.Invoke(ctx, User_SetUserSettingsTheme_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Users(ctx context.Context, in *UsersRequest, opts ...grpc.CallOption) (*UsersReply, error) {
	out := new(UsersReply)
	err := c.cc.Invoke(ctx, User_Users_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserPermissionDefinitions(ctx context.Context, in *UserPermissionDefinitionsRequest, opts ...grpc.CallOption) (*UserPermissionDefinitionsReply, error) {
	out := new(UserPermissionDefinitionsReply)
	err := c.cc.Invoke(ctx, User_UserPermissionDefinitions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserPermissions(ctx context.Context, in *UserPermissionsRequest, opts ...grpc.CallOption) (*UserPermissionsReply, error) {
	out := new(UserPermissionsReply)
	err := c.cc.Invoke(ctx, User_UserPermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GrantUserPermission(ctx context.Context, in *GrantUserPermissionRequest, opts ...grpc.CallOption) (*GrantUserPermissionReply, error) {
	out := new(GrantUserPermissionReply)
	err := c.cc.Invoke(ctx, User_GrantUserPermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) RevokeUserPermission(ctx context.Context, in *RevokeUserPermissionRequest, opts ...grpc.CallOption) (*RevokeUserPermissionReply, error) {
	out := new(RevokeUserPermissionReply)
	err := c.cc.Invoke(ctx, User_RevokeUserPermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterReply, error)
	Login(context.Context, *LoginRequest) (*LoginReply, error)
	UserSettings(context.Context, *UserSettingsRequest) (*UserSettingsReply, error)
	SetUserSettingsTheme(context.Context, *SetUserSettingsThemeRequest) (*SetUserSettingsThemeReply, error)
	Users(context.Context, *UsersRequest) (*UsersReply, error)
	UserPermissionDefinitions(context.Context, *UserPermissionDefinitionsRequest) (*UserPermissionDefinitionsReply, error)
	UserPermissions(context.Context, *UserPermissionsRequest) (*UserPermissionsReply, error)
	GrantUserPermission(context.Context, *GrantUserPermissionRequest) (*GrantUserPermissionReply, error)
	RevokeUserPermission(context.Context, *RevokeUserPermissionRequest) (*RevokeUserPermissionReply, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) Register(context.Context, *RegisterRequest) (*RegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUserServer) Login(context.Context, *LoginRequest) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserServer) UserSettings(context.Context, *UserSettingsRequest) (*UserSettingsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSettings not implemented")
}
func (UnimplementedUserServer) SetUserSettingsTheme(context.Context, *SetUserSettingsThemeRequest) (*SetUserSettingsThemeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserSettingsTheme not implemented")
}
func (UnimplementedUserServer) Users(context.Context, *UsersRequest) (*UsersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Users not implemented")
}
func (UnimplementedUserServer) UserPermissionDefinitions(context.Context, *UserPermissionDefinitionsRequest) (*UserPermissionDefinitionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserPermissionDefinitions not implemented")
}
func (UnimplementedUserServer) UserPermissions(context.Context, *UserPermissionsRequest) (*UserPermissionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserPermissions not implemented")
}
func (UnimplementedUserServer) GrantUserPermission(context.Context, *GrantUserPermissionRequest) (*GrantUserPermissionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantUserPermission not implemented")
}
func (UnimplementedUserServer) RevokeUserPermission(context.Context, *RevokeUserPermissionRequest) (*RevokeUserPermissionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeUserPermission not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UserSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserSettings(ctx, req.(*UserSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SetUserSettingsTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserSettingsThemeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SetUserSettingsTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_SetUserSettingsTheme_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SetUserSettingsTheme(ctx, req.(*SetUserSettingsThemeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Users_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Users(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_Users_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Users(ctx, req.(*UsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserPermissionDefinitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPermissionDefinitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserPermissionDefinitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UserPermissionDefinitions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserPermissionDefinitions(ctx, req.(*UserPermissionDefinitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UserPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserPermissions(ctx, req.(*UserPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GrantUserPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantUserPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GrantUserPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GrantUserPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GrantUserPermission(ctx, req.(*GrantUserPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_RevokeUserPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeUserPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).RevokeUserPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_RevokeUserPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).RevokeUserPermission(ctx, req.(*RevokeUserPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _User_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _User_Login_Handler,
		},
		{
			MethodName: "UserSettings",
			Handler:    _User_UserSettings_Handler,
		},
		{
			MethodName: "SetUserSettingsTheme",
			Handler:    _User_SetUserSettingsTheme_Handler,
		},
		{
			MethodName: "Users",
			Handler:    _User_Users_Handler,
		},
		{
			MethodName: "UserPermissionDefinitions",
			Handler:    _User_UserPermissionDefinitions_Handler,
		},
		{
			MethodName: "UserPermissions",
			Handler:    _User_UserPermissions_Handler,
		},
		{
			MethodName: "GrantUserPermission",
			Handler:    _User_GrantUserPermission_Handler,
		},
		{
			MethodName: "RevokeUserPermission",
			Handler:    _User_RevokeUserPermission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
