// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0

package query

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.countEmailsStmt, err = db.PrepareContext(ctx, countEmails); err != nil {
		return nil, fmt.Errorf("error preparing query CountEmails: %w", err)
	}
	if q.createEmailStmt, err = db.PrepareContext(ctx, createEmail); err != nil {
		return nil, fmt.Errorf("error preparing query CreateEmail: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.createUserPermissionStmt, err = db.PrepareContext(ctx, createUserPermission); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUserPermission: %w", err)
	}
	if q.createUserPermissionGrantStmt, err = db.PrepareContext(ctx, createUserPermissionGrant); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUserPermissionGrant: %w", err)
	}
	if q.createUserPermissionRevocationStmt, err = db.PrepareContext(ctx, createUserPermissionRevocation); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUserPermissionRevocation: %w", err)
	}
	if q.createUserSettingsStmt, err = db.PrepareContext(ctx, createUserSettings); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUserSettings: %w", err)
	}
	if q.deleteEmailStmt, err = db.PrepareContext(ctx, deleteEmail); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteEmail: %w", err)
	}
	if q.deleteUserPermissionStmt, err = db.PrepareContext(ctx, deleteUserPermission); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUserPermission: %w", err)
	}
	if q.deleteUserPermissionsByNameStmt, err = db.PrepareContext(ctx, deleteUserPermissionsByName); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUserPermissionsByName: %w", err)
	}
	if q.getEmailStmt, err = db.PrepareContext(ctx, getEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetEmail: %w", err)
	}
	if q.getEmailByAddressForUserStmt, err = db.PrepareContext(ctx, getEmailByAddressForUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetEmailByAddressForUser: %w", err)
	}
	if q.getUSerUsernameByIdStmt, err = db.PrepareContext(ctx, getUSerUsernameById); err != nil {
		return nil, fmt.Errorf("error preparing query GetUSerUsernameById: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.getUserByUsernameStmt, err = db.PrepareContext(ctx, getUserByUsername); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByUsername: %w", err)
	}
	if q.getUserPermissionByNameStmt, err = db.PrepareContext(ctx, getUserPermissionByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserPermissionByName: %w", err)
	}
	if q.getUserSettingsStmt, err = db.PrepareContext(ctx, getUserSettings); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserSettings: %w", err)
	}
	if q.getUserUsernameStmt, err = db.PrepareContext(ctx, getUserUsername); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserUsername: %w", err)
	}
	if q.getVerifiedEmailByAddressStmt, err = db.PrepareContext(ctx, getVerifiedEmailByAddress); err != nil {
		return nil, fmt.Errorf("error preparing query GetVerifiedEmailByAddress: %w", err)
	}
	if q.listEmailsStmt, err = db.PrepareContext(ctx, listEmails); err != nil {
		return nil, fmt.Errorf("error preparing query ListEmails: %w", err)
	}
	if q.listUserPermissionsStmt, err = db.PrepareContext(ctx, listUserPermissions); err != nil {
		return nil, fmt.Errorf("error preparing query ListUserPermissions: %w", err)
	}
	if q.listUserPermissionsByNameStmt, err = db.PrepareContext(ctx, listUserPermissionsByName); err != nil {
		return nil, fmt.Errorf("error preparing query ListUserPermissionsByName: %w", err)
	}
	if q.listUsersStmt, err = db.PrepareContext(ctx, listUsers); err != nil {
		return nil, fmt.Errorf("error preparing query ListUsers: %w", err)
	}
	if q.listVerifiedEmailsStmt, err = db.PrepareContext(ctx, listVerifiedEmails); err != nil {
		return nil, fmt.Errorf("error preparing query ListVerifiedEmails: %w", err)
	}
	if q.markEmailVerifiedStmt, err = db.PrepareContext(ctx, markEmailVerified); err != nil {
		return nil, fmt.Errorf("error preparing query MarkEmailVerified: %w", err)
	}
	if q.searchUsersByUsernameStmt, err = db.PrepareContext(ctx, searchUsersByUsername); err != nil {
		return nil, fmt.Errorf("error preparing query SearchUsersByUsername: %w", err)
	}
	if q.updateUserPasswordStmt, err = db.PrepareContext(ctx, updateUserPassword); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserPassword: %w", err)
	}
	if q.updateUserSettingsThemeStmt, err = db.PrepareContext(ctx, updateUserSettingsTheme); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserSettingsTheme: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.countEmailsStmt != nil {
		if cerr := q.countEmailsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countEmailsStmt: %w", cerr)
		}
	}
	if q.createEmailStmt != nil {
		if cerr := q.createEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createEmailStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.createUserPermissionStmt != nil {
		if cerr := q.createUserPermissionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserPermissionStmt: %w", cerr)
		}
	}
	if q.createUserPermissionGrantStmt != nil {
		if cerr := q.createUserPermissionGrantStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserPermissionGrantStmt: %w", cerr)
		}
	}
	if q.createUserPermissionRevocationStmt != nil {
		if cerr := q.createUserPermissionRevocationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserPermissionRevocationStmt: %w", cerr)
		}
	}
	if q.createUserSettingsStmt != nil {
		if cerr := q.createUserSettingsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserSettingsStmt: %w", cerr)
		}
	}
	if q.deleteEmailStmt != nil {
		if cerr := q.deleteEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteEmailStmt: %w", cerr)
		}
	}
	if q.deleteUserPermissionStmt != nil {
		if cerr := q.deleteUserPermissionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserPermissionStmt: %w", cerr)
		}
	}
	if q.deleteUserPermissionsByNameStmt != nil {
		if cerr := q.deleteUserPermissionsByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserPermissionsByNameStmt: %w", cerr)
		}
	}
	if q.getEmailStmt != nil {
		if cerr := q.getEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEmailStmt: %w", cerr)
		}
	}
	if q.getEmailByAddressForUserStmt != nil {
		if cerr := q.getEmailByAddressForUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEmailByAddressForUserStmt: %w", cerr)
		}
	}
	if q.getUSerUsernameByIdStmt != nil {
		if cerr := q.getUSerUsernameByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUSerUsernameByIdStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.getUserByUsernameStmt != nil {
		if cerr := q.getUserByUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByUsernameStmt: %w", cerr)
		}
	}
	if q.getUserPermissionByNameStmt != nil {
		if cerr := q.getUserPermissionByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserPermissionByNameStmt: %w", cerr)
		}
	}
	if q.getUserSettingsStmt != nil {
		if cerr := q.getUserSettingsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserSettingsStmt: %w", cerr)
		}
	}
	if q.getUserUsernameStmt != nil {
		if cerr := q.getUserUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserUsernameStmt: %w", cerr)
		}
	}
	if q.getVerifiedEmailByAddressStmt != nil {
		if cerr := q.getVerifiedEmailByAddressStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getVerifiedEmailByAddressStmt: %w", cerr)
		}
	}
	if q.listEmailsStmt != nil {
		if cerr := q.listEmailsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listEmailsStmt: %w", cerr)
		}
	}
	if q.listUserPermissionsStmt != nil {
		if cerr := q.listUserPermissionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUserPermissionsStmt: %w", cerr)
		}
	}
	if q.listUserPermissionsByNameStmt != nil {
		if cerr := q.listUserPermissionsByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUserPermissionsByNameStmt: %w", cerr)
		}
	}
	if q.listUsersStmt != nil {
		if cerr := q.listUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUsersStmt: %w", cerr)
		}
	}
	if q.listVerifiedEmailsStmt != nil {
		if cerr := q.listVerifiedEmailsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listVerifiedEmailsStmt: %w", cerr)
		}
	}
	if q.markEmailVerifiedStmt != nil {
		if cerr := q.markEmailVerifiedStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing markEmailVerifiedStmt: %w", cerr)
		}
	}
	if q.searchUsersByUsernameStmt != nil {
		if cerr := q.searchUsersByUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing searchUsersByUsernameStmt: %w", cerr)
		}
	}
	if q.updateUserPasswordStmt != nil {
		if cerr := q.updateUserPasswordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserPasswordStmt: %w", cerr)
		}
	}
	if q.updateUserSettingsThemeStmt != nil {
		if cerr := q.updateUserSettingsThemeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserSettingsThemeStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                 DBTX
	tx                                 *sql.Tx
	countEmailsStmt                    *sql.Stmt
	createEmailStmt                    *sql.Stmt
	createUserStmt                     *sql.Stmt
	createUserPermissionStmt           *sql.Stmt
	createUserPermissionGrantStmt      *sql.Stmt
	createUserPermissionRevocationStmt *sql.Stmt
	createUserSettingsStmt             *sql.Stmt
	deleteEmailStmt                    *sql.Stmt
	deleteUserPermissionStmt           *sql.Stmt
	deleteUserPermissionsByNameStmt    *sql.Stmt
	getEmailStmt                       *sql.Stmt
	getEmailByAddressForUserStmt       *sql.Stmt
	getUSerUsernameByIdStmt            *sql.Stmt
	getUserStmt                        *sql.Stmt
	getUserByUsernameStmt              *sql.Stmt
	getUserPermissionByNameStmt        *sql.Stmt
	getUserSettingsStmt                *sql.Stmt
	getUserUsernameStmt                *sql.Stmt
	getVerifiedEmailByAddressStmt      *sql.Stmt
	listEmailsStmt                     *sql.Stmt
	listUserPermissionsStmt            *sql.Stmt
	listUserPermissionsByNameStmt      *sql.Stmt
	listUsersStmt                      *sql.Stmt
	listVerifiedEmailsStmt             *sql.Stmt
	markEmailVerifiedStmt              *sql.Stmt
	searchUsersByUsernameStmt          *sql.Stmt
	updateUserPasswordStmt             *sql.Stmt
	updateUserSettingsThemeStmt        *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                 tx,
		tx:                                 tx,
		countEmailsStmt:                    q.countEmailsStmt,
		createEmailStmt:                    q.createEmailStmt,
		createUserStmt:                     q.createUserStmt,
		createUserPermissionStmt:           q.createUserPermissionStmt,
		createUserPermissionGrantStmt:      q.createUserPermissionGrantStmt,
		createUserPermissionRevocationStmt: q.createUserPermissionRevocationStmt,
		createUserSettingsStmt:             q.createUserSettingsStmt,
		deleteEmailStmt:                    q.deleteEmailStmt,
		deleteUserPermissionStmt:           q.deleteUserPermissionStmt,
		deleteUserPermissionsByNameStmt:    q.deleteUserPermissionsByNameStmt,
		getEmailStmt:                       q.getEmailStmt,
		getEmailByAddressForUserStmt:       q.getEmailByAddressForUserStmt,
		getUSerUsernameByIdStmt:            q.getUSerUsernameByIdStmt,
		getUserStmt:                        q.getUserStmt,
		getUserByUsernameStmt:              q.getUserByUsernameStmt,
		getUserPermissionByNameStmt:        q.getUserPermissionByNameStmt,
		getUserSettingsStmt:                q.getUserSettingsStmt,
		getUserUsernameStmt:                q.getUserUsernameStmt,
		getVerifiedEmailByAddressStmt:      q.getVerifiedEmailByAddressStmt,
		listEmailsStmt:                     q.listEmailsStmt,
		listUserPermissionsStmt:            q.listUserPermissionsStmt,
		listUserPermissionsByNameStmt:      q.listUserPermissionsByNameStmt,
		listUsersStmt:                      q.listUsersStmt,
		listVerifiedEmailsStmt:             q.listVerifiedEmailsStmt,
		markEmailVerifiedStmt:              q.markEmailVerifiedStmt,
		searchUsersByUsernameStmt:          q.searchUsersByUsernameStmt,
		updateUserPasswordStmt:             q.updateUserPasswordStmt,
		updateUserSettingsThemeStmt:        q.updateUserSettingsThemeStmt,
	}
}
