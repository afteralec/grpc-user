// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: user.sql

package query

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO users (username, pw_hash) VALUES (?, ?)
`

type CreateUserParams struct {
	Username string
	PwHash   string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.exec(ctx, q.createUserStmt, createUser, arg.Username, arg.PwHash)
}

const createUserPermission = `-- name: CreateUserPermission :execresult
INSERT INTO user_permissions (name, uid, iuid) VALUES (?, ?, ?)
`

type CreateUserPermissionParams struct {
	Name string
	UID  int64
	IUID int64
}

func (q *Queries) CreateUserPermission(ctx context.Context, arg CreateUserPermissionParams) (sql.Result, error) {
	return q.exec(ctx, q.createUserPermissionStmt, createUserPermission, arg.Name, arg.UID, arg.IUID)
}

const createUserPermissionGrant = `-- name: CreateUserPermissionGrant :exec
INSERT INTO user_permission_grants (name, uid, iuid) VALUES (?, ?, ?)
`

type CreateUserPermissionGrantParams struct {
	Name string
	UID  int64
	IUID int64
}

func (q *Queries) CreateUserPermissionGrant(ctx context.Context, arg CreateUserPermissionGrantParams) error {
	_, err := q.exec(ctx, q.createUserPermissionGrantStmt, createUserPermissionGrant, arg.Name, arg.UID, arg.IUID)
	return err
}

const createUserPermissionRevocation = `-- name: CreateUserPermissionRevocation :exec
INSERT INTO user_permission_revocations (name, uid, iuid) VALUES (?, ?, ?)
`

type CreateUserPermissionRevocationParams struct {
	Name string
	UID  int64
	IUID int64
}

func (q *Queries) CreateUserPermissionRevocation(ctx context.Context, arg CreateUserPermissionRevocationParams) error {
	_, err := q.exec(ctx, q.createUserPermissionRevocationStmt, createUserPermissionRevocation, arg.Name, arg.UID, arg.IUID)
	return err
}

const createUserSettings = `-- name: CreateUserSettings :exec
INSERT INTO user_settings (theme, uid) VALUES (?, ?)
`

type CreateUserSettingsParams struct {
	Theme string
	UID   int64
}

func (q *Queries) CreateUserSettings(ctx context.Context, arg CreateUserSettingsParams) error {
	_, err := q.exec(ctx, q.createUserSettingsStmt, createUserSettings, arg.Theme, arg.UID)
	return err
}

const deleteUserPermission = `-- name: DeleteUserPermission :exec
DELETE FROM user_permissions WHERE id = ?
`

func (q *Queries) DeleteUserPermission(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteUserPermissionStmt, deleteUserPermission, id)
	return err
}

const deleteUserPermissionsByName = `-- name: DeleteUserPermissionsByName :exec
DELETE FROM user_permissions WHERE name = ?
`

func (q *Queries) DeleteUserPermissionsByName(ctx context.Context, name string) error {
	_, err := q.exec(ctx, q.deleteUserPermissionsByNameStmt, deleteUserPermissionsByName, name)
	return err
}

const getUSerUsernameById = `-- name: GetUSerUsernameById :one
SELECT username FROM users WHERE id = ?
`

func (q *Queries) GetUSerUsernameById(ctx context.Context, id int64) (string, error) {
	row := q.queryRow(ctx, q.getUSerUsernameByIdStmt, getUSerUsernameById, id)
	var username string
	err := row.Scan(&username)
	return username, err
}

const getUser = `-- name: GetUser :one
SELECT pw_hash, username, id, created_at, updated_at FROM users WHERE id = ?
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.queryRow(ctx, q.getUserStmt, getUser, id)
	var i User
	err := row.Scan(
		&i.PwHash,
		&i.Username,
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT pw_hash, username, id, created_at, updated_at FROM users WHERE username = ?
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.queryRow(ctx, q.getUserByUsernameStmt, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.PwHash,
		&i.Username,
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserPermissionByName = `-- name: GetUserPermissionByName :one
SELECT name, iuid, uid, id, created_at FROM user_permissions WHERE name = ? AND uid = ?
`

type GetUserPermissionByNameParams struct {
	Name string
	UID  int64
}

func (q *Queries) GetUserPermissionByName(ctx context.Context, arg GetUserPermissionByNameParams) (UserPermission, error) {
	row := q.queryRow(ctx, q.getUserPermissionByNameStmt, getUserPermissionByName, arg.Name, arg.UID)
	var i UserPermission
	err := row.Scan(
		&i.Name,
		&i.IUID,
		&i.UID,
		&i.ID,
		&i.CreatedAt,
	)
	return i, err
}

const getUserSettings = `-- name: GetUserSettings :one
SELECT theme, uid, id, created_at, updated_at FROM user_settings WHERE uid = ?
`

func (q *Queries) GetUserSettings(ctx context.Context, uid int64) (UserSetting, error) {
	row := q.queryRow(ctx, q.getUserSettingsStmt, getUserSettings, uid)
	var i UserSetting
	err := row.Scan(
		&i.Theme,
		&i.UID,
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserUsername = `-- name: GetUserUsername :one
SELECT username FROM users WHERE id = ?
`

func (q *Queries) GetUserUsername(ctx context.Context, id int64) (string, error) {
	row := q.queryRow(ctx, q.getUserUsernameStmt, getUserUsername, id)
	var username string
	err := row.Scan(&username)
	return username, err
}

const listUserPermissions = `-- name: ListUserPermissions :many
SELECT name, iuid, uid, id, created_at FROM user_permissions WHERE uid = ?
`

func (q *Queries) ListUserPermissions(ctx context.Context, uid int64) ([]UserPermission, error) {
	rows, err := q.query(ctx, q.listUserPermissionsStmt, listUserPermissions, uid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserPermission
	for rows.Next() {
		var i UserPermission
		if err := rows.Scan(
			&i.Name,
			&i.IUID,
			&i.UID,
			&i.ID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserPermissionsByName = `-- name: ListUserPermissionsByName :many
SELECT name, iuid, uid, id, created_at FROM user_permissions WHERE name = ?
`

func (q *Queries) ListUserPermissionsByName(ctx context.Context, name string) ([]UserPermission, error) {
	rows, err := q.query(ctx, q.listUserPermissionsByNameStmt, listUserPermissionsByName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserPermission
	for rows.Next() {
		var i UserPermission
		if err := rows.Scan(
			&i.Name,
			&i.IUID,
			&i.UID,
			&i.ID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT pw_hash, username, id, created_at, updated_at FROM users
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.query(ctx, q.listUsersStmt, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.PwHash,
			&i.Username,
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchUsersByUsername = `-- name: SearchUsersByUsername :many
SELECT pw_hash, username, id, created_at, updated_at FROM users WHERE username LIKE ?
`

func (q *Queries) SearchUsersByUsername(ctx context.Context, username string) ([]User, error) {
	rows, err := q.query(ctx, q.searchUsersByUsernameStmt, searchUsersByUsername, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.PwHash,
			&i.Username,
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserPassword = `-- name: UpdateUserPassword :execresult
UPDATE users SET pw_hash = ? WHERE id = ?
`

type UpdateUserPasswordParams struct {
	PwHash string
	ID     int64
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (sql.Result, error) {
	return q.exec(ctx, q.updateUserPasswordStmt, updateUserPassword, arg.PwHash, arg.ID)
}

const updateUserSettingsTheme = `-- name: UpdateUserSettingsTheme :exec
UPDATE user_settings SET theme = ? WHERE uid = ?
`

type UpdateUserSettingsThemeParams struct {
	Theme string
	UID   int64
}

func (q *Queries) UpdateUserSettingsTheme(ctx context.Context, arg UpdateUserSettingsThemeParams) error {
	_, err := q.exec(ctx, q.updateUserSettingsThemeStmt, updateUserSettingsTheme, arg.Theme, arg.UID)
	return err
}
